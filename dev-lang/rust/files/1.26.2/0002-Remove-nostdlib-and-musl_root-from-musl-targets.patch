diff -Naur rustc-1.26.2-src.orig/config.toml.example rustc-1.26.2-src/config.toml.example
--- rustc-1.26.2-src.orig/config.toml.example	2018-06-16 11:22:33.396391832 -0700
+++ rustc-1.26.2-src/config.toml.example	2018-06-16 11:22:53.998391463 -0700
@@ -385,12 +385,6 @@
 # only use static libraries. If unset, the target's default linkage is used.
 #crt-static = false
 
-# The root location of the MUSL installation directory. The library directory
-# will also need to contain libunwind.a for an unwinding implementation. Note
-# that this option only makes sense for MUSL targets that produce statically
-# linked binaries
-#musl-root = "..."
-
 # Used in testing for configuring where the QEMU images are located, you
 # probably don't want to use this.
 #qemu-rootfs = "..."
diff -Naur rustc-1.26.2-src.orig/src/bootstrap/bin/rustc.rs rustc-1.26.2-src/src/bootstrap/bin/rustc.rs
--- rustc-1.26.2-src.orig/src/bootstrap/bin/rustc.rs	2018-06-16 11:22:29.172391908 -0700
+++ rustc-1.26.2-src/src/bootstrap/bin/rustc.rs	2018-06-16 11:23:27.848390857 -0700
@@ -30,7 +30,6 @@
 extern crate bootstrap;
 
 use std::env;
-use std::ffi::OsString;
 use std::io;
 use std::path::PathBuf;
 use std::process::Command;
@@ -119,15 +118,6 @@
             cmd.arg("-Cprefer-dynamic");
         }
 
-        // Help the libc crate compile by assisting it in finding the MUSL
-        // native libraries.
-        if let Some(s) = env::var_os("MUSL_ROOT") {
-            let mut root = OsString::from("native=");
-            root.push(&s);
-            root.push("/lib");
-            cmd.arg("-L").arg(&root);
-        }
-
         // Override linker if necessary.
         if let Ok(target_linker) = env::var("RUSTC_TARGET_LINKER") {
             cmd.arg(format!("-Clinker={}", target_linker));
diff -Naur rustc-1.26.2-src.orig/src/bootstrap/cc_detect.rs rustc-1.26.2-src/src/bootstrap/cc_detect.rs
--- rustc-1.26.2-src.orig/src/bootstrap/cc_detect.rs	2018-06-16 11:22:29.173391907 -0700
+++ rustc-1.26.2-src/src/bootstrap/cc_detect.rs	2018-06-16 11:24:29.726389749 -0700
@@ -87,7 +87,7 @@
         if let Some(cc) = config.and_then(|c| c.cc.as_ref()) {
             cfg.compiler(cc);
         } else {
-            set_compiler(&mut cfg, Language::C, target, config, build);
+            set_compiler(&mut cfg, Language::C, target, config);
         }
 
         let compiler = cfg.get_compiler();
@@ -115,7 +115,7 @@
         if let Some(cxx) = config.and_then(|c| c.cxx.as_ref()) {
             cfg.compiler(cxx);
         } else {
-            set_compiler(&mut cfg, Language::CPlusPlus, host, config, build);
+            set_compiler(&mut cfg, Language::CPlusPlus, host, config);
         }
         let compiler = cfg.get_compiler();
         build.verbose(&format!("CXX_{} = {:?}", host, compiler.path()));
@@ -126,8 +126,7 @@
 fn set_compiler(cfg: &mut cc::Build,
                 compiler: Language,
                 target: Interned<String>,
-                config: Option<&Target>,
-                build: &Build) {
+                config: Option<&Target>) {
     match &*target {
         // When compiling for android we may have the NDK configured in the
         // config.toml in which case we look there. Otherwise the default
@@ -164,26 +163,6 @@
             }
         }
 
-        "mips-unknown-linux-musl" => {
-            if cfg.get_compiler().path().to_str() == Some("gcc") {
-                cfg.compiler("mips-linux-musl-gcc");
-            }
-        }
-        "mipsel-unknown-linux-musl" => {
-            if cfg.get_compiler().path().to_str() == Some("gcc") {
-                cfg.compiler("mipsel-linux-musl-gcc");
-            }
-        }
-
-        t if t.contains("musl") => {
-            if let Some(root) = build.musl_root(target) {
-                let guess = root.join("bin/musl-gcc");
-                if guess.exists() {
-                    cfg.compiler(guess);
-                }
-            }
-        }
-
         _ => {}
     }
 }
diff -Naur rustc-1.26.2-src.orig/src/bootstrap/compile.rs rustc-1.26.2-src/src/bootstrap/compile.rs
--- rustc-1.26.2-src.orig/src/bootstrap/compile.rs	2018-06-16 11:22:29.173391907 -0700
+++ rustc-1.26.2-src/src/bootstrap/compile.rs	2018-06-16 11:25:15.744388925 -0700
@@ -79,13 +79,6 @@
             });
             println!("Uplifting stage1 std ({} -> {})", from.host, target);
 
-            // Even if we're not building std this stage, the new sysroot must
-            // still contain the musl startup objects.
-            if target.contains("musl") {
-                let libdir = builder.sysroot_libdir(compiler, target);
-                copy_musl_third_party_objects(build, target, &libdir);
-            }
-
             builder.ensure(StdLink {
                 compiler: from,
                 target_compiler: compiler,
@@ -94,11 +87,6 @@
             return;
         }
 
-        if target.contains("musl") {
-            let libdir = builder.sysroot_libdir(compiler, target);
-            copy_musl_third_party_objects(build, target, &libdir);
-        }
-
         let out_dir = build.cargo_out(compiler, Mode::Libstd, target);
         build.clear_if_dirty(&out_dir, &builder.rustc(compiler));
         let mut cargo = builder.cargo(compiler, Mode::Libstd, target, "build");
@@ -120,20 +108,6 @@
     }
 }
 
-/// Copies the crt(1,i,n).o startup objects
-///
-/// Since musl supports fully static linking, we can cross link for it even
-/// with a glibc-targeting toolchain, given we have the appropriate startup
-/// files. As those shipped with glibc won't work, copy the ones provided by
-/// musl so we have them on linux-gnu hosts.
-fn copy_musl_third_party_objects(build: &Build,
-                                 target: Interned<String>,
-                                 into: &Path) {
-    for &obj in &["crt1.o", "crti.o", "crtn.o"] {
-        copy(&build.musl_root(target).unwrap().join("lib").join(obj), &into.join(obj));
-    }
-}
-
 /// Configure cargo to compile the standard library, adding appropriate env vars
 /// and such.
 pub fn std_cargo(build: &Builder,
@@ -179,11 +153,6 @@
             cargo.env("JEMALLOC_OVERRIDE", jemalloc);
         }
     }
-    if target.contains("musl") {
-        if let Some(p) = build.musl_root(target) {
-            cargo.env("MUSL_ROOT", p);
-        }
-    }
 }
 
 #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
diff -Naur rustc-1.26.2-src.orig/src/bootstrap/config.rs rustc-1.26.2-src/src/bootstrap/config.rs
--- rustc-1.26.2-src.orig/src/bootstrap/config.rs	2018-06-16 11:22:29.173391907 -0700
+++ rustc-1.26.2-src/src/bootstrap/config.rs	2018-06-16 11:25:42.883388439 -0700
@@ -124,8 +124,6 @@
     pub save_toolstates: Option<PathBuf>,
     pub print_step_timings: bool,
 
-    // Fallback musl-root for all targets
-    pub musl_root: Option<PathBuf>,
     pub prefix: Option<PathBuf>,
     pub sysconfdir: Option<PathBuf>,
     pub datadir: Option<PathBuf>,
@@ -157,7 +155,6 @@
     pub linker: Option<PathBuf>,
     pub ndk: Option<PathBuf>,
     pub crt_static: Option<bool>,
-    pub musl_root: Option<PathBuf>,
     pub qemu_rootfs: Option<PathBuf>,
 }
 
@@ -283,7 +280,6 @@
     backtrace: Option<bool>,
     default_linker: Option<String>,
     channel: Option<String>,
-    musl_root: Option<String>,
     rpath: Option<bool>,
     optimize_tests: Option<bool>,
     debuginfo_tests: Option<bool>,
@@ -312,7 +308,6 @@
     linker: Option<String>,
     android_ndk: Option<String>,
     crt_static: Option<bool>,
-    musl_root: Option<String>,
     qemu_rootfs: Option<String>,
 }
 
@@ -491,7 +486,6 @@
             set(&mut config.lld_enabled, rust.lld);
             config.rustc_parallel_queries = rust.experimental_parallel_queries.unwrap_or(false);
             config.rustc_default_linker = rust.default_linker.clone();
-            config.musl_root = rust.musl_root.clone().map(PathBuf::from);
             config.save_toolstates = rust.save_toolstates.clone().map(PathBuf::from);
 
             if let Some(ref backends) = rust.codegen_backends {
@@ -527,7 +521,6 @@
                 target.ar = cfg.ar.clone().map(PathBuf::from);
                 target.linker = cfg.linker.clone().map(PathBuf::from);
                 target.crt_static = cfg.crt_static.clone();
-                target.musl_root = cfg.musl_root.clone().map(PathBuf::from);
                 target.qemu_rootfs = cfg.qemu_rootfs.clone().map(PathBuf::from);
 
                 config.target_config.insert(INTERNER.intern_string(triple.clone()), target);
diff -Naur rustc-1.26.2-src.orig/src/bootstrap/configure.py rustc-1.26.2-src/src/bootstrap/configure.py
--- rustc-1.26.2-src.orig/src/bootstrap/configure.py	2018-06-16 11:22:29.174391907 -0700
+++ rustc-1.26.2-src/src/bootstrap/configure.py	2018-06-16 11:26:09.751387957 -0700
@@ -107,26 +107,6 @@
   "aarch64-linux-android NDK standalone path")
 v("x86_64-linux-android-ndk", "target.x86_64-linux-android.android-ndk",
   "x86_64-linux-android NDK standalone path")
-v("musl-root", "target.x86_64-unknown-linux-musl.musl-root",
-  "MUSL root installation directory (deprecated)")
-v("musl-root-x86_64", "target.x86_64-unknown-linux-musl.musl-root",
-  "x86_64-unknown-linux-musl install directory")
-v("musl-root-i586", "target.i586-unknown-linux-musl.musl-root",
-  "i586-unknown-linux-musl install directory")
-v("musl-root-i686", "target.i686-unknown-linux-musl.musl-root",
-  "i686-unknown-linux-musl install directory")
-v("musl-root-arm", "target.arm-unknown-linux-musleabi.musl-root",
-  "arm-unknown-linux-musleabi install directory")
-v("musl-root-armhf", "target.arm-unknown-linux-musleabihf.musl-root",
-  "arm-unknown-linux-musleabihf install directory")
-v("musl-root-armv7", "target.armv7-unknown-linux-musleabihf.musl-root",
-  "armv7-unknown-linux-musleabihf install directory")
-v("musl-root-aarch64", "target.aarch64-unknown-linux-musl.musl-root",
-  "aarch64-unknown-linux-musl install directory")
-v("musl-root-mips", "target.mips-unknown-linux-musl.musl-root",
-  "mips-unknown-linux-musl install directory")
-v("musl-root-mipsel", "target.mipsel-unknown-linux-musl.musl-root",
-  "mipsel-unknown-linux-musl install directory")
 v("qemu-armhf-rootfs", "target.arm-unknown-linux-gnueabihf.qemu-rootfs",
   "rootfs in qemu testing, you probably don't want to use this")
 v("qemu-aarch64-rootfs", "target.aarch64-unknown-linux-gnu.qemu-rootfs",
diff -Naur rustc-1.26.2-src.orig/src/bootstrap/lib.rs rustc-1.26.2-src/src/bootstrap/lib.rs
--- rustc-1.26.2-src.orig/src/bootstrap/lib.rs	2018-06-16 11:22:29.173391907 -0700
+++ rustc-1.26.2-src/src/bootstrap/lib.rs	2018-06-16 11:26:19.201387788 -0700
@@ -701,14 +701,6 @@
         }
     }
 
-    /// Returns the "musl root" for this `target`, if defined
-    fn musl_root(&self, target: Interned<String>) -> Option<&Path> {
-        self.config.target_config.get(&target)
-            .and_then(|t| t.musl_root.as_ref())
-            .or(self.config.musl_root.as_ref())
-            .map(|p| &**p)
-    }
-
     /// Returns whether the target will be tested using the `remote-test-client`
     /// and `remote-test-server` binaries.
     fn remote_tested(&self, target: Interned<String>) -> bool {
diff -Naur rustc-1.26.2-src.orig/src/bootstrap/sanity.rs rustc-1.26.2-src/src/bootstrap/sanity.rs
--- rustc-1.26.2-src.orig/src/bootstrap/sanity.rs	2018-06-16 11:22:29.174391907 -0700
+++ rustc-1.26.2-src/src/bootstrap/sanity.rs	2018-06-16 11:26:47.473387282 -0700
@@ -21,7 +21,7 @@
 use std::collections::HashMap;
 use std::env;
 use std::ffi::{OsString, OsStr};
-use std::fs::{self, File};
+use std::fs::File;
 use std::io::Read;
 use std::path::PathBuf;
 use std::process::Command;
@@ -169,34 +169,6 @@
             panic!("the iOS target is only supported on macOS");
         }
 
-        // Make sure musl-root is valid
-        if target.contains("musl") {
-            // If this is a native target (host is also musl) and no musl-root is given,
-            // fall back to the system toolchain in /usr before giving up
-            if build.musl_root(*target).is_none() && build.config.build == *target {
-                let target = build.config.target_config.entry(target.clone())
-                                 .or_insert(Default::default());
-                target.musl_root = Some("/usr".into());
-            }
-            match build.musl_root(*target) {
-                Some(root) => {
-                    if fs::metadata(root.join("lib/libc.a")).is_err() {
-                        panic!("couldn't find libc.a in musl dir: {}",
-                               root.join("lib").display());
-                    }
-                    if fs::metadata(root.join("lib/libunwind.a")).is_err() {
-                        panic!("couldn't find libunwind.a in musl dir: {}",
-                               root.join("lib").display());
-                    }
-                }
-                None => {
-                    panic!("when targeting MUSL either the rust.musl-root \
-                            option or the target.$TARGET.musl-root option must \
-                            be specified in config.toml")
-                }
-            }
-        }
-
         if target.contains("msvc") {
             // There are three builds of cmake on windows: MSVC, MinGW, and
             // Cygwin. The Cygwin build does not have generators for Visual
diff -Naur rustc-1.26.2-src.orig/src/ci/docker/dist-i586-gnu-i586-i686-musl/Dockerfile rustc-1.26.2-src/src/ci/docker/dist-i586-gnu-i586-i686-musl/Dockerfile
--- rustc-1.26.2-src.orig/src/ci/docker/dist-i586-gnu-i586-i686-musl/Dockerfile	2018-06-16 11:22:23.405392011 -0700
+++ rustc-1.26.2-src/src/ci/docker/dist-i586-gnu-i586-i686-musl/Dockerfile	2018-06-16 11:27:03.296386998 -0700
@@ -30,8 +30,6 @@
 RUN sh /scripts/sccache.sh
 
 ENV RUST_CONFIGURE_ARGS \
-      --musl-root-i586=/musl-i586 \
-      --musl-root-i686=/musl-i686 \
       --enable-extended \
       --disable-docs
 
diff -Naur rustc-1.26.2-src.orig/src/ci/docker/dist-various-1/Dockerfile rustc-1.26.2-src/src/ci/docker/dist-various-1/Dockerfile
--- rustc-1.26.2-src.orig/src/ci/docker/dist-various-1/Dockerfile	2018-06-16 11:22:23.407392011 -0700
+++ rustc-1.26.2-src/src/ci/docker/dist-various-1/Dockerfile	2018-06-16 11:27:20.337386693 -0700
@@ -89,12 +89,6 @@
     CFLAGS_armv5te_unknown_linux_gnueabi="-march=armv5te -marm -mfloat-abi=soft"
 
 ENV RUST_CONFIGURE_ARGS \
-      --musl-root-arm=/musl-arm \
-      --musl-root-armhf=/musl-armhf \
-      --musl-root-armv7=/musl-armv7 \
-      --musl-root-aarch64=/musl-aarch64 \
-      --musl-root-mips=/musl-mips \
-      --musl-root-mipsel=/musl-mipsel \
       --enable-emscripten \
       --disable-docs
 
diff -Naur rustc-1.26.2-src.orig/src/ci/docker/dist-x86_64-musl/Dockerfile rustc-1.26.2-src/src/ci/docker/dist-x86_64-musl/Dockerfile
--- rustc-1.26.2-src.orig/src/ci/docker/dist-x86_64-musl/Dockerfile	2018-06-16 11:22:23.408392011 -0700
+++ rustc-1.26.2-src/src/ci/docker/dist-x86_64-musl/Dockerfile	2018-06-16 11:27:35.208386427 -0700
@@ -30,7 +30,6 @@
 RUN sh /scripts/sccache.sh
 
 ENV RUST_CONFIGURE_ARGS \
-      --musl-root-x86_64=/musl-x86_64 \
       --enable-extended \
       --disable-docs
 
diff -Naur rustc-1.26.2-src.orig/src/librustc_back/target/linux_musl_base.rs rustc-1.26.2-src/src/librustc_back/target/linux_musl_base.rs
--- rustc-1.26.2-src.orig/src/librustc_back/target/linux_musl_base.rs	2018-06-16 11:22:29.170391908 -0700
+++ rustc-1.26.2-src/src/librustc_back/target/linux_musl_base.rs	2018-06-16 11:28:09.763385808 -0700
@@ -14,10 +14,6 @@
 pub fn opts() -> TargetOptions {
     let mut base = super::linux_base::opts();
 
-    // Make sure that the linker/gcc really don't pull in anything, including
-    // default objects, libs, etc.
-    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push("-nostdlib".to_string());
-
     // At least when this was tested, the linker would not add the
     // `GNU_EH_FRAME` program header to executables generated, which is required
     // when unwinding to locate the unwinding information. I'm not sure why this
@@ -49,17 +45,6 @@
     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push("-Wl,-(".to_string());
     base.post_link_args.insert(LinkerFlavor::Gcc, vec!["-Wl,-)".to_string()]);
 
-    // When generating a statically linked executable there's generally some
-    // small setup needed which is listed in these files. These are provided by
-    // a musl toolchain and are linked by default by the `musl-gcc` script. Note
-    // that `gcc` also does this by default, it just uses some different files.
-    //
-    // Each target directory for musl has these object files included in it so
-    // they'll be included from there.
-    base.pre_link_objects_exe.push("crt1.o".to_string());
-    base.pre_link_objects_exe.push("crti.o".to_string());
-    base.post_link_objects.push("crtn.o".to_string());
-
     // These targets statically link libc by default
     base.crt_static_default = true;
     // These targets allow the user to choose between static and dynamic linking.
